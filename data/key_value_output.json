{
    "\"01장 파이썬이란 무엇인가?\"": "\"파이썬이란 무엇인가?\",",
    "\"01-1\"": "\"파이썬이란?\",",
    "\"01-2\"": "\"파이썬의 특징\",",
    "\"01-3\"": "\"파이썬으로 무엇을 할 수 있을까?\",",
    "\"01-4\"": "\"파이썬 설치하기\",",
    "\"01-5\"": "\"파이썬 둘러보기\",",
    "\"01-6\"": "\"파이썬과 에디터\",",
    "\"02장 파이썬 프로그래밍의 기초, 자료형\"": "\"파이썬 프로그래밍의 기초, 자료형\",",
    "\"02-1\"": "\"숫자형\",",
    "\"02-2\"": "\"문자열 자료형\",",
    "\"02-3\"": "\"리스트 자료형\",",
    "\"02-4\"": "\"튜플 자료형\",",
    "\"02-5\"": "\"딕셔너리 자료형\",",
    "\"02-6\"": "\"집합 자료형\",",
    "\"02-7\"": "\"불 자료형\",",
    "\"02-8\"": "\"자료형의 값을 저장하는 공간, 변수\",",
    "\"03장 프로그램의 구조를 쌓는다! 제어문\"": "\"프로그램의 구조를 쌓는다! 제어문\",",
    "\"03-1\"": "\"if문\",",
    "\"03-2\"": "\"while문\",",
    "\"03-3\"": "\"for문\",",
    "\"04장 파이썬의 입출력\"": "\"파이썬의 입출력\",",
    "\"04-1\"": "\"함수\",",
    "\"04-2\"": "\"사용자 입출력\",",
    "\"04-3\"": "\"파일 읽고 쓰기\",",
    "\"04-4\"": "\"프로그램의 입출력\",",
    "\"05장 파이썬 날개 달기\"": "\"파이썬 날개 달기\",",
    "\"05-1\"": "\"클래스\",",
    "\"05-2\"": "\"모듈\",",
    "\"05-3\"": "\"패키지\",",
    "\"05-4\"": "\"예외 처리\",",
    "\"05-5\"": "\"내장 함수\",",
    "\"05-6\"": "\"표준 라이브러리\",",
    "\"05-7\"": "\"외부 라이브러리\",",
    "\"06장 파이썬 프로그래밍, 어떻게 시작해야 할까?\"": "\"파이썬 프로그래밍, 어떻게 시작해야 할까?\",",
    "\"06-1\"": "\"내가 프로그램을 만들 수 있을까?\",",
    "\"06-2\"": "\"3과 5의 배수를 모두 더하기\",",
    "\"06-3\"": "\"게시판 페이징하기\",",
    "\"06-4\"": "\"간단한 메모장 만들기\",",
    "\"06-5\"": "\"탭 문자를 공백 문자 4개로 바꾸기\",",
    "\"06-6\"": "\"하위 디렉터리 검색하기\",",
    "\"07장 파이썬 날아오르기\"": "\"파이썬 날아오르기\",",
    "\"07-1\"": "\"파이썬과 유니코드\",",
    "\"07-2\"": "\"클로저와 데코레이터\",",
    "\"07-3\"": "\"이터레이터와 제너레이터\",",
    "\"07-4\"": "\"파이썬 타입 어노테이션\",",
    "\"08장 정규표현식\"": "\"정규표현식\",",
    "\"08-1\"": "\"정규 표현식 살펴보기\",",
    "\"08-2\"": "\"정규 표현식 시작하기\",",
    "\"08-3\"": "\"강력한 정규 표현식의 세계로\"",
    "- **이전글**": "03-3 for문",
    "- **다음글**": "04장 파이썬의 입출력# 4장",
    "![https": "//wikidocs.net/images/page/22/03_3_for2.png](https://wikidocs.net/images/page/22/03_3_for2.png)",
    "- [파이썬은 인간다운 언어이다](https": "//wikidocs.net/6#_1)",
    "- [문법이 쉬워 빠르게 배울 수 있다](https": "//wikidocs.net/6#_2)",
    "- [무료이지만 강력하다](https": "//wikidocs.net/6#_3)",
    "- [간결하다](https": "//wikidocs.net/6#_4)",
    "- [프로그래밍을 즐기게 해 준다](https": "//wikidocs.net/6#_5)",
    "- [개발 속도가 빠르다](https": "//wikidocs.net/6#_6)",
    "if 4in [1,2,3,4]": "print(\"4가 있습니다\")",
    "for langin languages": "",
    "if langin ['python', 'perl']": "",
    "elif langin ['c', 'java']": "",
    "else": "",
    "- [파이썬으로 할 수 있는 일](https": "//wikidocs.net/7#_1)",
    "- [웹 프로그래밍](https": "//wikidocs.net/7#_2)",
    "- [인공지능과 머신러닝](https": "//wikidocs.net/7#_3)",
    "- [수치 연산 프로그래밍](https": "//wikidocs.net/7#_4)",
    "- [데이터 분석](https": "//wikidocs.net/7#_5)",
    "- [데이터베이스 프로그래밍](https": "//wikidocs.net/7#_6)",
    "- [시스템 유틸리티 제작하기](https": "//wikidocs.net/7#_7)",
    "- [GUI 프로그래밍](https": "//wikidocs.net/7#gui)",
    "- [C/C++와 결합하기](https": "//wikidocs.net/7#cc)",
    "- [사물 인터넷](https": "//wikidocs.net/7#_8)",
    "- [파이썬으로 할 수 없는 일](https": "//wikidocs.net/7#_9)",
    "- [시스템과 밀접한 프로그래밍 영역](https": "//wikidocs.net/7#_10)",
    "- [모바일 프로그래밍](https": "//wikidocs.net/7#_11)",
    "이제 실습을 해 보기 위해 컴퓨터에 파이썬을 설치해 보자. 이 책에서는 윈도우와 맥에서의 설치 방법만 다룬다. 다른 시스템을 사용한다면 파이썬 홈페이지([www.python.org](https": "//www.python.org/))의 설명을 참고하기 바란다.",
    "- [윈도우에서 파이썬 설치하기](https": "//wikidocs.net/8#_1)",
    "- [맥에서 파이썬 설치하기](https": "//wikidocs.net/8#_2)",
    "**1.** 먼저 파이썬 공식 홈페이지의 다운로드 페이지([www.python.org/downloads](https": "//www.python.org/downloads))에서 윈도우용 파이썬 언어 패키지를 내려받는다. 다음 화면에서 Python 3.x로 시작하는 버전 중 가장 최신의 윈도우 설치 파일을 내려받자(이 글을 작성하는 시점의 최신 버전은 3.11.2이다).",
    "파이썬 공식 홈페이지([www.python.org](https": "//www.python.org/))에서 [Downloads] 메뉴를 클릭하여 맥(Mac)용 파이썬 설치 파일을 내려받은 후 다음 화면에서 [Download Python 3.11.x]를 클릭하면 된다.",
    "- [파이썬 기초 실습 준비하기](https": "//wikidocs.net/9#_1)",
    "- [파이썬 기초 문법 따라 해 보기](https": "//wikidocs.net/9#_2)",
    "- [사칙 연산](https": "//wikidocs.net/12#_5)",
    "- [변수에 숫자 대입하고 계산하기](https": "//wikidocs.net/9#_4)",
    "- [변수에 문자 대입하고 출력하기](https": "//wikidocs.net/9#_5)",
    "- [조건문 if](https": "//wikidocs.net/9#if)",
    "- [반복문 for](https": "//wikidocs.net/9#for)",
    "- [반복문 while](https": "//wikidocs.net/9#while)",
    "- [함수](https": "//wikidocs.net/9#_6)",
    "Python 3.11.2 (tags/v3.11.2": "878ead1, Feb 7 2023, 16:38:35) [MSC v.1934 64 bit (AMD64)] on win32",
    ">>>if a > 1": "",
    "`if a > 1": "` 다음 문장은 [`Spacebar`] 4개 또는 [`Tab`]을 이용해 반드시 들여쓰기 한 후에 print(\"a는 1보다 큽니다.\")라고 작성해야 한다. 들여쓰기 규칙은 '03장 제어문'에서 자세하게 알아본다. 바로 뒤에 이어지는 반복문 for, while 예제도 이와 마찬가지로 들여쓰기가 필요하다.",
    "> 실습 영상": "https://youtu.be/mtdbM3EOS68",
    ">>>for ain [1, 2, 3]": "",
    ">>>while i < 3": "",
    ">>>defadd(a, b)": "",
    "- [IDLE 에디터로 파이썬 프로그램 작성하기](https": "//wikidocs.net/17684#idle)",
    "- [명령 프롬프트 창에서 파이썬 프로그램 실행하기](https": "//wikidocs.net/17684#_1)",
    "- [추천하는 에디터](https": "//wikidocs.net/17684#_2)",
    "- [비주얼 스튜디오 코드](https": "//wikidocs.net/17684#_3)",
    "- [파이참](https": "//wikidocs.net/17684#_4)",
    "Author": "EungYong Park",
    "Date": "2023-05-01",
    "IDLE 에디터 창 메뉴에서 [Run → Run Module]을 선택한다(단축키": "`F5`)",
    "[확인]을 선택하면 [다른 이름으로 저장] 창이 나타난다. 로컬 디스크(C": ")로 이동한 후 ‘doit’이라는 이름으로 디렉터리(폴더)를 생성하고 그 안에 hello.py라는 이름으로 파일을 저장하자. 에디터로 파이썬 프로그램을 작성한 후 저장할 때는 파일 이름의 확장자를 항상 .py로 해야 한다. .py는 파이썬 파일이라는 것을 알려 주는 확장자이다.",
    "> 실습 경로를 간단히 하기 위해 C": "\\doit 디렉터리를 생성한 후 파일을 저장했다. C:\\에 파일을 바로 저장하면 오류가 발생할 수 있으므로 꼭 C:\\ 하위에 디렉터리를 생성한 후 그 안에 파일을 저장하자.",
    "실행 결과": "",
    "우리는 이미 다음과 같은 프로그램을 `C": "\\doit` 디렉터리에 ‘hello.py’라는 이름으로 저장했다.",
    "첫 번째 줄에는 다음과 같은 프롬프트가 나타나 있을 것이다. `C": "\\Users\\박응용`에서 `박응용`은 필자의 컴퓨터 이름이다(물론 여러분의 명령 프롬프트는 여러분의 컴퓨터 이름으로 표시될 것이다).",
    "C": "\\doit>python marks2.py",
    "이제 다음과 같이 프롬프트에서 `cd c": "\\doit`이라고 입력한다. cd(change directory) 명령어는 프롬프트를 바로 다음에 나오는 디렉터리로 옮긴다.",
    "c": "\\doit> python hello.py",
    "> c": "\\doit에서 역슬래시(\\)는 [Enter] 바로 위에 있는 키(원화 표시 문자)로 입력한다.",
    "프롬프트가 `c": "\\doit>`으로 바뀐 것을 확인할 수 있다. 이제 명령어 python과 실행할 프로그램 이름을 입력하면 파이썬 프로그램을 실행할 수 있다. 다음과 같이 입력해 hello.py 프로그램을 실행해 보자.",
    "위와 같이 hello.py 프로그램이 실행되는 것을 확인할 수 있다. 만약 결괏값이 위와 같지 않다면 hello.py 파일이 `C": "\\doit` 디렉터리에 존재하는지 다시 한번 살펴보자.",
    "비주얼 스튜디오 코드(Visual studio code)는 파이참(Pycharm)과 더불어 프로그래머에게 가장 많은 사랑을 받는 파이썬의 대표적인 에디터이다. 비주얼 스튜디오 코드는 공식 다운로드 사이트([code.visualstudio.com](https": "//code.visualstudio.com/))에서 내려받을 수 있다.",
    "파이썬에 어느 정도 익숙해졌다면 파이참을 사용해 보기를 적극 추천한다. 파이참은 가장 유명한 파이썬 에디터 중 하나로, 코드를 작성할 때 자동 완성, 문법 체크 등 편리한 기능을 많이 제공한다. 파이참 공식 다운로드 사이트([www.jetbrains.com/pycharm/download](https": "//www.jetbrains.com/pycharm/download))에서 내려받을 수 있다.",
    "- [숫자형은 어떻게 만들고 사용할까?](https": "//wikidocs.net/12#_1)",
    "- [정수형](https": "//wikidocs.net/12#_2)",
    "- [실수형](https": "//wikidocs.net/12#_3)",
    "- [8진수와 16진수](https": "//wikidocs.net/12#8-16)",
    "- [숫자형을 활용하기 위한 연산자](https": "//wikidocs.net/12#_4)",
    "- [x의 y제곱을 나타내는 ** 연산자](https": "//wikidocs.net/12#x-y)",
    "- [나눗셈 후 나머지를 리턴하는 % 연산자](https": "//wikidocs.net/12#_6)",
    "- [나눗셈 후 몫을 리턴하는 // 연산자](https": "//wikidocs.net/12#_7)",
    "- [복합 연산자](https": "//wikidocs.net/12#_8)",
    "> 0xABC = 10×162+11×161+12=2748 (A": "10, B:11, C:12)",
    "- [문자열은 어떻게 만들고 사용할까?](https": "//wikidocs.net/13#_1)",
    "- [1. 큰따옴표로 양쪽 둘러싸기](https": "//wikidocs.net/13#1)",
    "- [2. 작은따옴표로 양쪽 둘러싸기](https": "//wikidocs.net/13#2)",
    "- [3. 큰따옴표 3개를 연속으로 써서 양쪽 둘러싸기](https": "//wikidocs.net/13#3-3)",
    "- [4. 작은따옴표 3개를 연속으로 써서 양쪽 둘러싸기](https": "//wikidocs.net/13#4-3)",
    "- [문자열 안에 작은따옴표나 큰따옴표를 포함시키고 싶을 때](https": "//wikidocs.net/13#_2)",
    "- [1. 문자열에 작은따옴표 포함하기](https": "//wikidocs.net/13#1_1)",
    "- [2. 문자열에 큰따옴표 포함하기](https": "//wikidocs.net/13#2_1)",
    "- [3. 역슬래시를 사용해서 작은따옴표와 큰따옴표를 문자열에 포함하기](https": "//wikidocs.net/13#3)",
    "- [여러 줄인 문자열을 변수에 대입하고 싶을 때](https": "//wikidocs.net/13#_3)",
    "- [1. 줄을 바꾸기 위한 이스케이프 코드 \\n 삽입하기](https": "//wikidocs.net/13#1-n)",
    "- [2. 연속된 작은따옴표 3개 또는 큰따옴표 3개 사용하기](https": "//wikidocs.net/13#2-3-3)",
    "- [문자열 연산하기](https": "//wikidocs.net/13#_4)",
    "- [문자열 더해서 연결하기](https": "//wikidocs.net/13#_5)",
    "- [문자열 곱하기](https": "//wikidocs.net/13#_6)",
    "- [문자열 곱하기를 응용하기](https": "//wikidocs.net/13#_7)",
    "- [문자열 길이 구하기](https": "//wikidocs.net/13#_8)",
    "- [문자열 인덱싱과 슬라이싱](https": "//wikidocs.net/13#_9)",
    "- [문자열 인덱싱](https": "//wikidocs.net/13#_10)",
    "- [문자열 인덱싱 활용하기](https": "//wikidocs.net/13#_11)",
    "- [문자열 슬라이싱](https": "//wikidocs.net/13#_12)",
    "- [문자열을 슬라이싱하는 방법](https": "//wikidocs.net/13#_13)",
    "- [슬라이싱으로 문자열 나누기](https": "//wikidocs.net/13#_14)",
    "- [문자열 포매팅이란?](https": "//wikidocs.net/13#_15)",
    "- [문자열 포매팅 따라 하기](https": "//wikidocs.net/13#_16)",
    "- [1. 숫자 바로 대입](https": "//wikidocs.net/13#1_2)",
    "- [2. 문자열 바로 대입](https": "//wikidocs.net/13#2_2)",
    "- [3. 숫자 값을 나타내는 변수로 대입](https": "//wikidocs.net/13#3_1)",
    "- [4. 2개 이상의 값 넣기](https": "//wikidocs.net/13#4-2)",
    "- [문자열 포맷 코드](https": "//wikidocs.net/13#_17)",
    "- [포맷 코드와 숫자 함께 사용하기](https": "//wikidocs.net/13#_18)",
    "- [1. 정렬과 공백](https": "//wikidocs.net/13#1_3)",
    "- [2. 소수점 표현하기](https": "//wikidocs.net/13#2_3)",
    "- [format 함수를 사용한 포매팅](https": "//wikidocs.net/13#format)",
    "- [숫자 바로 대입하기](https": "//wikidocs.net/13#_19)",
    "- [문자열 바로 대입하기](https": "//wikidocs.net/13#_20)",
    "- [숫자 값을 가진 변수로 대입하기](https": "//wikidocs.net/13#_21)",
    "- [2개 이상의 값 넣기](https": "//wikidocs.net/13#2_4)",
    "- [이름으로 넣기](https": "//wikidocs.net/13#_22)",
    "- [인덱스와 이름을 혼용해서 넣기](https": "//wikidocs.net/13#_23)",
    "- [왼쪽 정렬](https": "//wikidocs.net/13#_24)",
    "- [오른쪽 정렬](https": "//wikidocs.net/13#_25)",
    "- [가운데 정렬](https": "//wikidocs.net/13#_26)",
    "- [공백 채우기](https": "//wikidocs.net/13#_27)",
    "- [소수점 표현하기](https": "//wikidocs.net/13#_28)",
    "- [{ 또는 } 문자 표현하기](https": "//wikidocs.net/13#_29)",
    "- [f 문자열 포매팅](https": "//wikidocs.net/13#f)",
    "- [문자열 관련 함수들](https": "//wikidocs.net/13#_30)",
    "- [문자 개수 세기 - count](https": "//wikidocs.net/13#-count)",
    "- [위치 알려 주기 1 - find](https": "//wikidocs.net/13#1-find)",
    "- [위치 알려 주기 2 - index](https": "//wikidocs.net/13#2-index)",
    "- [문자열 삽입 - join](https": "//wikidocs.net/13#-join)",
    "- [소문자를 대문자로 바꾸기 - upper](https": "//wikidocs.net/13#-upper)",
    "- [대문자를 소문자로 바꾸기 - lower](https": "//wikidocs.net/13#-lower)",
    "- [왼쪽 공백 지우기 - lstrip](https": "//wikidocs.net/13#-lstrip)",
    "- [오른쪽 공백 지우기 - rstrip](https": "//wikidocs.net/13#-rstrip)",
    "- [양쪽 공백 지우기 - strip](https": "//wikidocs.net/13#-strip)",
    "- [문자열 바꾸기 - replace](https": "//wikidocs.net/13#-replace)",
    "- [문자열 나누기 - split](https": "//wikidocs.net/13#-split)",
    "SyntaxError": "invalid syntax",
    "입력한 소스는 `C": "\\doit` 디렉터리에 ‘multistring.py’라는 파일 이름으로 저장하자.",
    "a[0]": "'L', a[1]:'i', a[2]:'f', a[3]:'e', a[4]:' ', ...",
    ">>> a[0": "2]",
    "a[0": "4]는 a 문자열, 즉 \"Life is too short, You need Python\" 문자열에서 자리 번호 0부터 4까지의 문자를 뽑아 낸다는 뜻이다.",
    "하지만 ‘a[0]은 L, a[1]은 i, a[2]는 f, a[3]은 e이므로 a[0": "3]으로도 Life라는 단어를 뽑아 낼 수 있지 않을까?’라는 의문이 생길 것이다. 다음 예로 확인해 보자.",
    "이렇게 되는 이유는 슬라이싱 기법으로 a[시작_번호": "끝_번호]를 지정할 때 끝 번호에 해당하는 문자는 포함하지 않기 때문이다. 즉, a[0:3]을 수식으로 나타내면 다음과 같다.",
    "이 수식을 만족하는 것은 a[0], a[1], a[2]이다. 따라서 a[0": "3]은 'Lif', a[0:4]는 'Life'가 되는 것이다.",
    ">>> a[5": "7]",
    ">>> a[12": "17]",
    "a[시작_번호": "끝_번호]에서 시작 번호와 끝 번호를 생략하면 문자열의 처음부터 끝까지 뽑아 낸다.",
    ">>> a[19": "-7]",
    ">>> a[": "1] + 'y' + a[2:]",
    "a[19": "-7]은 a[19]에서 a[-8]까지를 의미한다. 이때에도 a[-7]은 포함하지 않는다.",
    ">>> date = a[": "8]",
    ">>> weather = a[8": "]",
    "위 예는 문자열 a를 두 부분으로 나누는 기법이다. 숫자 8을 기준으로 문자열 a를 양쪽으로 한 번씩 슬라이싱했다. a[": "8]은 a[8]을 포함하지 않고 a[8:]은 a[8]을 포함하기 때문에 8을 기준으로 해서 두 부분으로 나눌 수 있는 것이다. 위 예에서는 \"20230331Rainy\" 문자열을 날짜를 나타내는 부분인 '20230331'과 날씨를 나타내는 부분인 'Rainy'로 나누는 방법을 보여 준다.",
    ">>> year = a[": "4]",
    ">>> day = a[4": "8]",
    ">>> a[2": "5]",
    "`Traceback (most recent call last)": "",
    "ValueError": "0isnotin list",
    ">>> \"{0": "10.4f}\".format(y)",
    "`": "^`를 사용하면 가운데 정렬도 가능하다.",
    "오른쪽 정렬은 `": "<` 대신 `:>`을 사용하면 된다. 화살표의 방향을 생각하면 어느 쪽으로 정렬되는지 바로 알 수 있을 것이다.",
    ">>> d = {'name'": "'홍길동', 'age':30}",
    ">>> f'{\"hi\"": "!<10}'  # 왼쪽 정렬하고 '!' 문자로 공백 채우기",
    ">>> f'{y": "10.4f}'  # 소수점 4자리까지 표현하고 총 자리수를 10으로 맞춤",
    "Traceback (most recent call last)": "",
    ">>> b = \"a": "b:c:d\"",
    ">>> b.split('": "')",
    "split 함수는 a.split()처럼 괄호 안에 아무 값도 넣어 주지 않으면 공백(`[Space]`, `[Tab]`, `[Enter]`)을 기준으로 문자열을 나누어 준다. 만약 b.split('": "')처럼 괄호 안에 특정 값이 있을 경우에는 괄호 안의 값을 구분자로 해서 문자열을 나누어 준다. 이렇게 나눈 값은 리스트에 하나씩 들어간다. `['Life', 'is', 'too', 'short']`나 `['a', 'b', 'c', 'd']`가 리스트인데, 02-3에서 자세히 알아볼 것이므로 여기에서는 너무 신경 쓰지 않아도 된다.",
    "- [리스트는 어떻게 만들고 사용할까?](https": "//wikidocs.net/14#_1)",
    "- [리스트의 인덱싱과 슬라이싱](https": "//wikidocs.net/14#_2)",
    "- [리스트의 인덱싱](https": "//wikidocs.net/14#_3)",
    "- [리스트의 슬라이싱](https": "//wikidocs.net/14#_4)",
    "- [리스트 연산하기](https": "//wikidocs.net/14#_5)",
    "- [리스트 더하기(+)](https": "//wikidocs.net/14#_6)",
    "- [리스트 반복하기(*)](https": "//wikidocs.net/14#_7)",
    "- [리스트 길이 구하기](https": "//wikidocs.net/14#_8)",
    "- [리스트의 수정과 삭제](https": "//wikidocs.net/14#_9)",
    "- [리스트의 값 수정하기](https": "//wikidocs.net/14#_10)",
    "- [del 함수를 사용해 리스트 요소 삭제하기](https": "//wikidocs.net/14#del)",
    "- [리스트 관련 함수](https": "//wikidocs.net/14#_11)",
    "- [리스트에 요소 추가하기 - append](https": "//wikidocs.net/14#-append)",
    "- [리스트 정렬 - sort](https": "//wikidocs.net/14#-sort)",
    "- [리스트 뒤집기 - reverse](https": "//wikidocs.net/14#-reverse)",
    "- [인덱스 반환 - index](https": "//wikidocs.net/14#-index)",
    "- [리스트에 요소 삽입 - insert](https": "//wikidocs.net/14#-insert)",
    "- [리스트 요소 제거 - remove](https": "//wikidocs.net/14#-remove)",
    "- [리스트 요소 끄집어 내기 - pop](https": "//wikidocs.net/14#-pop)",
    "- [리스트에 포함된 요소 x의 개수 세기 - count](https": "//wikidocs.net/14#x-count)",
    "- [리스트 확장 - extend](https": "//wikidocs.net/14#-extend)",
    ">>> b = a[": "]",
    ">>> c = a[2": "]",
    ">>> a[3][": "2]",
    "위 예에서 a[3]은 ['a', 'b', 'c']를 나타낸다. 따라서 a[3][": "2]는 ['a', 'b', 'c']의 첫 번째 요소부터 세 번째 요소 직전까지의 값, 즉 ['a', 'b']를 나타내는 리스트가 된다.",
    "TypeError": "unhashable type: 'list'",
    ">>>del a[2": "]",
    "a[2": "]에 해당하는 리스트의 요소들이 삭제되었다.",
    "- [튜플은 어떻게 만들까?](https": "//wikidocs.net/15#_1)",
    "- [튜플의 요솟값을 지우거나 변경하려고 하면 어떻게 될까?](https": "//wikidocs.net/15#_2)",
    "- [1. 튜플 요솟값을 삭제하려 할 때](https": "//wikidocs.net/15#1)",
    "- [2. 튜플 요솟값을 변경하려 할 때](https": "//wikidocs.net/15#2)",
    "- [튜플 다루기](https": "//wikidocs.net/15#_3)",
    "- [인덱싱하기](https": "//wikidocs.net/15#_4)",
    "- [슬라이싱하기](https": "//wikidocs.net/15#_5)",
    "- [튜플 더하기](https": "//wikidocs.net/15#_6)",
    "- [튜플 곱하기](https": "//wikidocs.net/15#_7)",
    "- [튜플 길이 구하기](https": "//wikidocs.net/15#_8)",
    ">>> t1[1": "]",
    "- [딕셔너리란?](https": "//wikidocs.net/16#_1)",
    "- [딕셔너리는 어떻게 만들까?](https": "//wikidocs.net/16#_2)",
    "- [딕셔너리 쌍 추가, 삭제하기](https": "//wikidocs.net/16#_3)",
    "- [딕셔너리 쌍 추가하기](https": "//wikidocs.net/16#_4)",
    "- [딕셔너리 요소 삭제하기](https": "//wikidocs.net/16#_5)",
    "- [딕셔너리를 사용하는 방법](https": "//wikidocs.net/16#_6)",
    "- [딕셔너리에서 Key를 사용해 Value 얻기](https": "//wikidocs.net/16#key-value)",
    "- [딕셔너리 만들 때 주의할 사항](https": "//wikidocs.net/16#_7)",
    "- [딕셔너리 관련 함수](https": "//wikidocs.net/16#_8)",
    "- [Key 리스트 만들기 - keys](https": "//wikidocs.net/16#key-keys)",
    "- [Value 리스트 만들기 - values](https": "//wikidocs.net/16#value-values)",
    "- [Key, Value 쌍 얻기 - items](https": "//wikidocs.net/16#key-value-items)",
    "- [Key": "Value 쌍 모두 지우기 - clear](https://wikidocs.net/16#key-value-clear)",
    "- [Key로 Value 얻기 - get](https": "//wikidocs.net/16#key-value-get)",
    "- [해당 Key가 딕셔너리 안에 있는지 조사하기 - in](https": "//wikidocs.net/16#key-in)",
    "{Key1": "Value1, Key2: Value2, Key3: Value3, ...}",
    "Key와 Value의 쌍 여러 개가 {}로 둘러싸여 있다. 각각의 요소는 Key": "Value 형태로 이루어져 있고 쉼표(,)로 구분되어 있다.",
    ">>> dic = {'name'": "'pey', 'phone':'010-9999-1234', 'birth': '1118'}",
    ">>> a = {1": "'a', 1:'b'}",
    ">>> a = {'a'": "1, 'b': 2}",
    "{1": "'b'}",
    "딕셔너리 a에 {'name'": "'pey'} 쌍이 추가되었다.",
    "{2": "'b', 'name': 'pey', 3: [1, 2, 3]}",
    "위 예제는 딕셔너리 요소를 지우는 방법을 보여 준다. del 함수를 사용해서 `del a[key]`를 입력하면 지정한 Key에 해당하는 {Key": "Value} 쌍이 삭제된다.",
    "{\"김연아\"": "\"피겨스케이팅\", \"류현진\": \"야구\", \"손흥민\": \"축구\", \"귀도\": \"파이썬\"}",
    ">>> grade = {'pey'": "10, 'julliet': 99}",
    "먼저 a 변수에 {1": "'a', 2: 'b'} 딕셔너리를 대입하였다. 위 예에서 볼 수 있듯이 a[1]은 'a' 값을 리턴한다. 여기에서 a[1]이 의미하는 것은 리스트나 튜플의 a[1]과는 전혀 다르다. 딕셔너리 변수에서 [] 안의 숫자 1은 두 번째 요소를 나타내는 것이 아니라 Key에 해당하는 1을 나타낸다. 앞에서도 말했듯이 딕셔너리는 리스트나 튜플에 있는 인덱싱 방법을 적용할 수 없다. 따라서 a[1]은 딕셔너리 {1: 'a', 2: 'b'}에서 Key가 1인 것의 Value인 'a'를 리턴한다. a[2] 역시 마찬가지이다.",
    "딕셔너리에서 Key는 고유한 값이므로 중복되는 Key 값을 설정해 놓으면 하나를 제외한 나머지 것들이 모두 무시된다는 점에 주의해야 한다. 다음 예에서 볼 수 있듯이 동일한 Key가 2개 존재할 경우, 1": "'a' 쌍이 무시된다.",
    "이렇게 Key가 중복되었을 때 1개를 제외한 나머지 Key": "Value 값이 모두 무시되는 이유는 Key를 통해서 Value를 얻는 딕셔너리의 특징 때문이다. 즉, 딕셔너리에는 동일한 Key가 중복으로 존재할 수 없다.",
    ">>> a = {[1,2]": "'hi'}",
    ">>> a = {'name'": "'pey', 'phone':'010-9999-1234', 'birth': '1118'}",
    "파이썬 2.7 버전까지는 a.keys() 함수를 호출하면 dict_keys가 아닌 리스트를 리턴한다. 리스트를 리턴하기 위해서는 메모리 낭비가 발생하는데, 파이썬 3.0 이후 버전에서는 이러한 메모리 낭비를 줄이기 위해 dict_keys 객체를 리턴하도록 변경되었다. 다음에 소개할 dict_values, dict_items 역시 파이썬 3.0 이후 버전에서 추가된 것들이다. 만약 3.0 이후 버전에서 리턴값으로 리스트가 필요한 경우에는 `list(a.keys())`를 사용하면 된다. dict_keys, dict_values, dict_items 객체는 리스트로 변환하지 않더라도 기본적인 반복 구문(예": "for 문)에서 사용할 수 있다.",
    ">>>for kin a.keys()": "",
    "### **Key": "Value 쌍 모두 지우기 - clear**",
    "KeyError": "'nokey'",
    "- [집합 자료형은 어떻게 만들까?](https": "//wikidocs.net/1015#_1)",
    "- [집합 자료형의 특징](https": "//wikidocs.net/1015#_2)",
    "- [교집합, 합집합, 차집합 구하기](https": "//wikidocs.net/1015#_3)",
    "- [교집합 구하기](https": "//wikidocs.net/1015#_4)",
    "- [합집합 구하기](https": "//wikidocs.net/1015#_5)",
    "- [차집합 구하기](https": "//wikidocs.net/1015#_6)",
    "- [집합 자료형 관련 함수](https": "//wikidocs.net/1015#_7)",
    "- [값 1개 추가하기 - add](https": "//wikidocs.net/1015#1-add)",
    "- [값 여러 개 추가하기 - update](https": "//wikidocs.net/1015#-update)",
    "- [특정 값 제거하기 - remove](https": "//wikidocs.net/1015#-remove)",
    "- True": "참을 의미한다.",
    "- False": "거짓을 의미한다.",
    "- [불 자료형은 어떻게 사용할까?](https": "//wikidocs.net/17#_1)",
    "- [자료형의 참과 거짓](https": "//wikidocs.net/17#_2)",
    "- [불 연산](https": "//wikidocs.net/17#_3)",
    "| {'a'": "1} | 참 |",
    ">>>while a": "",
    "while 조건문": "",
    ">>>if []": "",
    "...else": "",
    ">>>if [1, 2, 3]": "",
    "- [변수는 어떻게 만들까?](https": "//wikidocs.net/18#_1)",
    "- [변수란?](https": "//wikidocs.net/18#_2)",
    "- [리스트를 복사하고자 할 때](https": "//wikidocs.net/18#_3)",
    "- [1. [": "] 이용하기](https://wikidocs.net/18#1)",
    "- [2. copy 모듈 이용하기](https": "//wikidocs.net/18#2-copy)",
    "- [변수를 만드는 여러 가지 방법](https": "//wikidocs.net/18#_4)",
    "### **1. [": "] 이용하기**",
    "첫 번째 방법은 다음과 같이 리스트 전체를 가리키는 [": "]을 사용해서 복사하는 것이다.",
    "위 예에서 b = copy(a)는 b = a[": "]과 동일하다.",
    "- [if 문은 왜 필요할까?](https": "//wikidocs.net/20#if)",
    "- [if 문의 기본 구조](https": "//wikidocs.net/20#if_1)",
    "- [들여쓰기 방법 알아보기](https": "//wikidocs.net/20#_1)",
    "- [조건문이란 무엇인가?](https": "//wikidocs.net/20#_2)",
    "- [비교 연산자](https": "//wikidocs.net/20#_3)",
    "- [and, or, not](https": "//wikidocs.net/20#and-or-not)",
    "- [in, not in](https": "//wikidocs.net/20#in-not-in)",
    "- [다양한 조건을 판단하는 elif](https": "//wikidocs.net/20#elif)",
    "- [조건부 표현식](https": "//wikidocs.net/20#_4)",
    ">>>if money": "",
    "if 조건문": "",
    "if 문을 만들 때는 if 조건문": "바로 다음 문장부터 if 문에 속하는 모든 문장에 들여쓰기(indentation)를 해야 한다. 다음 예를 보면 조건문이 참일 경우 ‘수행할_문장1’을 들여쓰기했고 ‘수행할_문장2’와 ‘수행할_문장3’도 들여쓰기했다. 다른 프로그래밍 언어를 사용해 온 사람들은 파이썬에서 ‘수행할_문장’을 들여쓰기하는 것을 무시하는 경우가 많으므로 더 주의해야 한다.",
    "if money": "",
    "**점프 투 파이썬조건문 다음에 콜론(": ")을 잊지 말자!**",
    "if 조건문 뒤에는 반드시 콜론(": ")이 붙는다. 어떤 특별한 의미가 있다기보다는 파이썬의 문법 구조이다. 왜 하필 콜론(:)인지 궁금하다면 파이썬을 만든 귀도에게 직접 물어봐야 할 것이다. 앞으로 배울 while이나 for, def, class도 역시 문장의 끝에 콜론(:)이 항상 들어간다. 초보자들은 이 콜론(:)을 빠뜨리는 경우가 많으므로 특히 주의하자.",
    "파이썬이 다른 언어보다 보기 쉽고 소스 코드가 간결한 이유는 바로 콜론(": ")을 사용하여 들여쓰기를 하도록 만들었기 때문이다. 하지만 이는 숙련된 프로그래머들이 파이썬을 처음 접할 때 제일 혼란스러워하는 부분이기도 하다. 다른 언어에서는 if 문에 속한 문장들을 {}로 감싸지만, 파이썬에서는 들여쓰기로 해결한다는 점을 기억하자.",
    ">>>if money >= 3000": "",
    ">>>if money >= 3000or card": "",
    ">>>if 'money'in pocket": "",
    ">>> **if** 'money' **in** pocket": "**pass**... **else**: print(\"카드를 꺼내라\")",
    "...     **pass**... **else**": "",
    "...if card": "",
    "...elif card": "",
    "elif 조건문": "",
    "`>>> **if** 'money' **in** pocket": "",
    "if 문 다음에 수행할 문장을 콜론(": ") 뒤에 바로 적었다. else 문 역시 마찬가지이다.",
    "if score >= 60": "",
    "- [while 문의 기본 구조](https": "//wikidocs.net/21#while)",
    "- [while 문 만들기](https": "//wikidocs.net/21#while_1)",
    "- [while 문 강제로 빠져나가기](https": "//wikidocs.net/21#while_2)",
    "- [while 문의 맨 처음으로 돌아가기](https": "//wikidocs.net/21#while_3)",
    "- [무한 루프](https": "//wikidocs.net/21#_1)",
    ">>>while treeHit < 10": "",
    "...if treeHit == 10": "",
    "... Enter number": "\"\"\"",
    ">>>while number != 4": "",
    "Enter number": "",
    ">>>while money": "",
    "...if coffee == 0": "",
    "money가 300으로 고정되어 있고 `while money": "`에서 조건문인 money는 0이 아니기 때문에 항상 참이다. 따라서 무한히 반복되는 무한 루프를 돌게 된다. 그리고 while 문의 내용을 한 번 수행할 때마다 `coffee = coffee - 1`에 의해 coffee의 개수가 1개씩 줄어든다. 만약 coffee가 0이 되면 `if coffee == 0:` 문장에서 `coffee == 0`이 참이 되므로 if 문 다음 문장 \"커피가 다 떨어졌습니다. 판매를 중지합니다.\"가 출력되고 break 문이 호출되어 while 문을 빠져나가게 된다.",
    "while True": "",
    "money = int(input(\"돈을 넣어 주세요": "\"))",
    "if money == 300": "",
    "elif money > 300": "",
    "if coffee == 0": "",
    "위 프로그램 소스를 따로 설명하지는 않겠다. 여러분이 소스를 입력하면서 무슨 내용인지 이해할 수 있다면 지금까지 배운 if 문이나 while 문을 이해했다고 보면 된다. 만약 `money = int(input(\"돈을 넣어 주세요": "\"))` 문장이 이해되지 않는다면 이 문장은 사용자로부터 값을 입력받는 부분이고 입력받은 숫자를 money 변수에 대입하는 것이라고만 알아 두자.",
    "돈을 넣어 주세요": "",
    ">>>while a < 10": "",
    "...if a % 2 == 0": "continue...     print(a)",
    ">>>while True": "",
    "- [for 문의 기본 구조](https": "//wikidocs.net/22#for)",
    "- [예제를 통해 for 문 이해하기](https": "//wikidocs.net/22#for_1)",
    "- [1. 전형적인 for 문](https": "//wikidocs.net/22#1-for)",
    "- [2. 다양한 for 문의 사용](https": "//wikidocs.net/22#2-for)",
    "- [3. for 문의 응용](https": "//wikidocs.net/22#3-for)",
    "- [for 문과 continue 문](https": "//wikidocs.net/22#for-continue)",
    "- [for 문과 함께 자주 사용하는 range 함수](https": "//wikidocs.net/22#for-range)",
    "- [range 함수의 예시 살펴보기](https": "//wikidocs.net/22#range)",
    "- [for와 range를 이용한 구구단](https": "//wikidocs.net/22#for-range_1)",
    "- [리스트 컴프리헨션 사용하기](https": "//wikidocs.net/22#_1)",
    "for 변수in 리스트(또는 튜플, 문자열)": "",
    ">>>for iin test_list": "",
    ">>>for (first, last)in a": "",
    "for markin marks": "",
    "if mark >= 60": "",
    "if mark < 60": "",
    ">>>for iin range(1, 11)": "",
    "for numberin range(len(marks))": "",
    "if marks[number] < 60": "",
    ">>>for iin range(2,10)": "# 1번 for문",
    "...for jin range(1, 10)": "# 2번 for문",
    ">>>for numin a": ""
}